@model IEnumerable<MasterPiece.Models.Package>

@{
    ViewBag.Title = "Test Packages";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .container {
        margin-top: 50px;
    }

    .table-container {
        margin-top: 20px;
    }

    .card {
        padding: 1em;
        overflow-x: auto;
    }

    button.btn.btn-success {
        margin: 0.5em;
    }

    body {
        background-color: #69acc759;
    }

    .container-fluid {
        padding-top: 120px !important;
    }



    /* Dropdown container */
    .dropdown1 {
        width: 490px;
        max-width: 100%;
        margin: 0 auto 20px;
    }

    /* Style the search box */
    .search-box {
        border: 1px solid #DFE5EF;
        border-radius: 5px;
        padding: 10px;
        display: block;
        width: 100%;
        font-size: 16px;
        transition: 0.5s ease;
    }

    /* The container for the dropdown items */
    .dropdown-content {
        display: none;
        position: absolute;
        background-color: white;
        min-width: 100%;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
        z-index: 1;
        max-height: 200px;
        overflow-y: auto; /* Scroll when dropdown exceeds height */
        border: 1px solid #ddd;
    }

        /* Links inside the dropdown */
        .dropdown-content a {
            color: black;
            padding: 12px;
            text-decoration: none;
            display: block;
        }

            /* Highlight the search result links when hovered */
            .dropdown-content a:hover {
                background-color: #f1f1f1;
            }

    /* Show the dropdown */
    .dropdown:hover .dropdown-content {
        display: block;
    }

    /* Table styles */
    .test-table {
        width: 75%;
        margin: 20px auto;
        border-collapse: collapse;
        border: 1px solid #ddd;
    }

        .test-table th, .test-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .test-table th {
            background-color: #f4f4f4;
        }

        /* Style the Total Price Row */
        .test-table tfoot th {
            font-weight: bold;
            background-color: #f4f4f4;
        }
    /* Style the Remove button */
    .remove-btn {
        background-color: #ff4d4d;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

        .remove-btn:hover {
            background-color: #ff3333;
        }
    /* Style the table to have fixed-width columns */
    table {
        table-layout: fixed; /* Ensures that columns have fixed width */
        width: 100%; /* Table takes full width of the container */
    }

    /* Limit the width of specific columns */
    td, th {
        padding: 10px;
        text-align: left;
        vertical-align: top;
        white-space: nowrap; /* Prevent text wrapping */
        overflow: hidden;
        text-overflow: ellipsis; /* Adds '...' if text overflows */
    }

        /* Limit the width of specific columns */
        td:first-child { /* Column for images */
            width: 100px; /* Fixed width for image column */
        }

        td:nth-child(4) { /* Price column */
            width: 100px; /* Adjust width as necessary */
        }

        td:nth-child(5) { /* Column for tests */
            max-width: 200px; /* Set max width for test list */
        }

            /* Limit the height for the tests column and allow scrolling */
            td:nth-child(5) ul {
                max-height: 100px; /* Maximum height */
                overflow-y: hidden; /* Add vertical scroll if the content overflows */
                overflow-x: hidden; /* Add vertical scroll if the content overflows */
                list-style-type: none; /* Remove bullet points */
                padding-left: 0;
                margin: 0;
            }

    /* Style for buttons */
    .btn {
        white-space: nowrap;
    }
</style>

<div class="container mt-5">
    <div class="card shadow p-4 mb-5 bg-white rounded">
        <h2 class="text-center">Test Packages</h2>
        <p class="text-start">
            <!-- Button to trigger Create New Package modal -->
            <button type="button" class="btn btn-outline-primary mb-3" data-bs-toggle="modal" data-bs-target="#createPackageModal">
                Create New
            </button>
        </p>

        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Picture</th>
                        <th>Package Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Tests Included</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var package in Model)
                    {
                        <tr>
                            <!-- Show Package Image -->
                            <td>
                                @if (!string.IsNullOrEmpty(package.Picture))
                                {
                                    <img src="~/Uploads/Packages/@package.Picture" alt="@package.Package_Name" style="width: 100px; height: auto;" />
                                }
                                else
                                {
                                    <img src="/images/default.png" alt="No Image" style="width: 100px; height: auto;" />
                                }
                            </td>
                            <td>@Html.DisplayFor(modelItem => package.Package_Name)</td>
                            <td>@Html.DisplayFor(modelItem => package.Description)</td>
                            <td>@Html.DisplayFor(modelItem => package.Price)</td>
                            <td>
                                @if (package.Package_Tests != null && package.Package_Tests.Any())
                                {
                                    <ul>
                                        @foreach (var test in package.Package_Tests)
                                        {
                                            <li>@test.Test.Test_Name</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p>No tests</p>
                                }
                            </td>
                            <td class="text-center">
                                <!-- Flex container for the buttons -->
                                <div class="d-flex justify-content-center">
                                    <!-- Edit button to open edit modal with pre-filled package data -->
                                    <button type="button" class="btn btn-sm btn-outline-warning me-2" data-bs-toggle="modal" data-bs-target="#editPackageModal"
                                            onclick="openEditModal('@package.Package_ID', '@package.Package_Name', '@package.Description', '@package.Price', '@package.Picture')">
                                        Edit
                                    </button>

                                    <!-- Delete button to open delete confirmation modal -->
                                    <button type="button" class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deletePackageModal"
                                            onclick="setDeletePackage('@package.Package_ID', '@package.Package_Name')">
                                        Delete
                                    </button>
                                </div>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Create Package Modal -->
<div class="modal fade" id="createPackageModal" tabindex="-1" aria-labelledby="createPackageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createPackageModalLabel">Create New Package</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Create Package Form -->
                @using (Html.BeginForm("CreatePackage", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="Package_Name" class="form-label">Package Name</label>
                        <input type="text" class="form-control" id="Package_Name" name="Package_Name" required />
                    </div>
                    <div class="mb-3">
                        <label for="Description" class="form-label">Description</label>
                        <textarea class="form-control" id="Description" name="Description" required rows="5"></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="Price" class="form-label">Price</label>
                        <input type="number" class="form-control" id="Price" name="Price" required step="0.01" />
                    </div>

                    <div class="mb-3">
                        <label for="Price" class="form-label">Old Price</label>
                        <input type="number" class="form-control" id="Old_price" name="Old_price" required step="0.01" />
                    </div>

                    <div class="mb-3">
                        <label for="Picture" class="form-label">Package Image</label>
                        <input type="file" class="form-control" id="Picture" name="Picture" />
                    </div>

                    <!-- Searchable Dropdown for selecting tests -->
                    <div class="dropdown mb-3">
                        <input type="text" placeholder="Search for tests..." id="searchInput" onkeyup="filterFunction()" class="form-control search-box">
                        <div id="dropdownItems" class="dropdown-content">
                            @foreach (var test in ViewBag.TestsList)
                            {
                                <a href="#" data-price="@test.Price" onclick="addTestToTable('@test.Test_Name', @test.Price, @test.Test_ID)">@test.Test_Name</a>
                            }
                        </div>
                    </div>

                    <!-- Table to display selected tests -->
            <div class="mb-3">
                <h5>Selected Tests:</h5>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Test Name</th>
                            <th>Price</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="testTableBody">
                        <!-- Selected tests will be added here -->
                    </tbody>
                    <tfoot>
                        <tr>
                            <th>Total</th>
                            <th id="totalPrice">$0</th>
                            <th></th>
                        </tr>
                    </tfoot>
                </table>
                <!-- Hidden inputs for selected tests -->
                <div id="selectedTestsInputs"></div>
            </div>

                    <button type="submit" class="btn btn-primary">Save</button>
                }
            </div>
        </div>
    </div>
</div>
<!-- Edit Package Modal -->
<div class="modal fade" id="editPackageModal" tabindex="-1" aria-labelledby="editPackageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editPackageModalLabel">Edit Package</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Edit Package Form -->
                @using (Html.BeginForm("EditPackage", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("Package_ID", "", new { id = "edit_Package_ID" }) <!-- Hidden field for package ID -->

                    <div class="mb-3">
                        <label for="edit_Package_Name" class="form-label">Package Name</label>
                        <input type="text" class="form-control" id="edit_Package_Name" name="Package_Name" required />
                    </div>

                    <div class="mb-3">
                        <label for="edit_Description" class="form-label">Description</label>
                        <textarea class="form-control" id="edit_Description" name="Description" required rows="5"></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="edit_Price" class="form-label">Price</label>
                        <input type="number" class="form-control" id="edit_Price" name="Price" required step="0.01" />
                    </div>

                    <div class="mb-3">
                        <label for="edit_Price" class="form-label">Old Price</label>
                        <input type="number" class="form-control" id="Old_price" name="Old_price" required step="0.01" />
                    </div>

                    <div class="mb-3">
                        <label for="edit_Picture" class="form-label">Package Image</label>
                        <input type="file" class="form-control" id="edit_Picture" name="Picture" onchange="previewImage(event)" />
                    </div>

                    <!-- Searchable Dropdown for adding more tests -->
                    <div class="dropdown mb-3">
                        <input type="text" placeholder="Search for tests..." id="editSearchInput" onkeyup="editFilterFunction()" class="form-control search-box">
                        <div id="editDropdownItems" class="dropdown-content">
                            @foreach (var test in ViewBag.TestsList)
                            {
                                <a href="#" data-price="@test.Price" onclick="addTestToEditTable('@test.Test_Name', @test.Price, @test.Test_ID)">@test.Test_Name</a>
                            }
                        </div>
                    </div>

                    <!-- Table to display already selected tests -->
                    <div class="mb-3">
                        <h5>Selected Tests:</h5>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Test Name</th>
                                    <th>Price</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="editTestTableBody">
                                <!-- Pre-populated selected tests will be dynamically added here -->
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Total</th>
                                    <th id="editTotalPrice">$0</th>
                                    <th></th>
                                </tr>
                            </tfoot>
                        </table>


                    </div>
                    <div id="selectedTestsInputsEDIT"></div> <!-- Hidden inputs will go here -->
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                }
            </div>
        </div>
    </div>
</div>


<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deletePackageModal" tabindex="-1" aria-labelledby="deletePackageModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deletePackageModalLabel">Delete Package</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong id="deletePackageName"></strong>?</p>
            </div>
            <div class="modal-footer">
                @using (Html.BeginForm("DeletePackage", "Admin", FormMethod.Post))
                {
                    @Html.Hidden("Package_ID", "", new { id = "delete_Package_ID" })
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                }
            </div>
        </div>
    </div>
</div>

<!-- jQuery CDN -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    function openEditModal(id, name, description, price, picture) {
        // Set basic package details
        document.getElementById('edit_Package_ID').value = id;
        document.getElementById('edit_Package_Name').value = name;
        document.getElementById('edit_Description').value = description;
        document.getElementById('edit_Price').value = price;
        //document.getElementById('picturePreview').src = picture;
        // Fetch selected tests for the package using AJAX
        $.ajax({
            url: '/Admin/GetPackageDetails',
            type: 'GET',
            data: { id: id },
            success: function (data) {
                // Clear existing table rows
                document.getElementById('editTestTableBody').innerHTML = '';

                // Loop through the returned selected tests and add them to the table
                data.selectedTests.forEach(function (test) {
                    addTestToEditTable(test.Test_Name, test.Price, test.Test_ID);
                });

                // Update total price after populating the table
                updateEditTotalPrice();
            },
            error: function (err) {
                console.log('Error fetching package details: ', err);
            }
        });
    }


    // Set the package details for the Delete Confirmation Modal
    function setDeletePackage(id, name) {
        document.getElementById('delete_Package_ID').value = id;
        document.getElementById('deletePackageName').innerText = name;
    }

    // Function to preview image on change
    function previewImage(event) {
        const reader = new FileReader();
        reader.onload = function () {
            const output = document.getElementById('picturePreview');
            output.src = reader.result;
        }
        reader.readAsDataURL(event.target.files[0]);
    }
</script>

<!-- jQuery CDN -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to filter dropdown items
    function filterFunction() {
        let input = document.getElementById("searchInput");
        let filter = input.value.toUpperCase();
        let div = document.getElementById("dropdownItems");
        let a = div.getElementsByTagName("a");

        for (let i = 0; i < a.length; i++) {
            let txtValue = a[i].textContent || a[i].innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                a[i].style.display = "";
            } else {
                a[i].style.display = "none";
            }
        }
    }


    let selectedTestsCounter = 0; // To index the selected tests


    // Function to add the selected test and price to the table
    function addTestToTable(testName, price, testId) {
        let tableBody = document.getElementById("testTableBody");

        // Check if the test is already in the table (avoid duplicates)
        let existingRows = tableBody.getElementsByTagName("tr");
        for (let i = 0; i < existingRows.length; i++) {
            let existingTest = existingRows[i].getElementsByTagName("td")[0].textContent;
            if (existingTest === testName) {
                alert('This test is already added!');
                return; // Exit if test is already added
            }
        }

        // Create a new row
        let newRow = document.createElement("tr");

        // Create cells for test name, price, and remove button
        let testNameCell = document.createElement("td");
        let priceCell = document.createElement("td");
        let actionCell = document.createElement("td");

        // Set the cell values
        testNameCell.textContent = testName;
        priceCell.textContent = "$" + price;

        // Create the remove button
        let removeBtn = document.createElement("button");
        removeBtn.classList.add("btn", "btn-danger", "btn-sm");
        removeBtn.textContent = "Remove";
        removeBtn.onclick = function () {
            removeTestFromTable(newRow, testId); // Call the remove function
        };
        actionCell.appendChild(removeBtn);

        // Append the cells to the new row
        newRow.appendChild(testNameCell);
        newRow.appendChild(priceCell);
        newRow.appendChild(actionCell);

        // Append the new row to the table body
        tableBody.appendChild(newRow);

        // Add a hidden input for the selected test
        let selectedTestsDiv = document.getElementById("selectedTestsInputs");
        let hiddenTestInput = document.createElement("input");
        hiddenTestInput.type = "hidden";
        hiddenTestInput.name = `SelectedTests[${selectedTestsCounter}].Test_ID`; // Bind to SelectedTests in the model
        hiddenTestInput.value = testId;
        selectedTestsDiv.appendChild(hiddenTestInput);

        selectedTestsCounter++; // Increment the counter

        console.log(selectedTestsDiv)
        // Update the total price
        updateTotalPrice();
    }

    // Function to update the total price
    function updateTotalPrice() {
        let tableBody = document.getElementById("testTableBody");
        let totalPriceElement = document.getElementById("totalPrice");
        let total = 0;

        // Loop through the table rows and sum the prices
        let rows = tableBody.getElementsByTagName("tr");
        for (let i = 0; i < rows.length; i++) {
            let priceText = rows[i].getElementsByTagName("td")[1].textContent;
            let price = parseFloat(priceText.replace("$", ""));
            total += price;
        }

        // Update the total price in the table footer
        totalPriceElement.textContent = "$" + total;
    }

    


    function removeTestFromTable(row, testId) {
        let tableBody = document.getElementById("testTableBody");
        tableBody.removeChild(row); // Remove the row from the table

        // Remove the hidden input for the test
        let selectedTestsDiv = document.getElementById("selectedTestsInputs");
        let hiddenInputs = selectedTestsDiv.getElementsByTagName("input");

        // Loop through hidden inputs and remove the one matching testId
        for (let i = 0; i < hiddenInputs.length; i++) {
            if (hiddenInputs[i].value == testId) {
                selectedTestsDiv.removeChild(hiddenInputs[i]);
                break; // Exit loop after removing the matching input
            }
        }

        // Reindex the remaining hidden inputs to maintain the correct array structure
        reindexHiddenInputs();

        // Update the total price after removal
        updateEditTotalPrice();

        // Debugging: Log the updated state of hidden inputs
        console.log(selectedTestsDiv.innerHTML);
    }

    // Function to reindex hidden inputs
    function reindexHiddenInputs() {
        let selectedTestsDiv = document.getElementById("selectedTestsInputs");
        let hiddenInputs = selectedTestsDiv.getElementsByTagName("input");

        // Reindex all hidden inputs after removal
        for (let i = 0; i < hiddenInputs.length; i++) {
            hiddenInputs[i].name = `SelectedTests[${i}].Test_ID`; // Ensure correct model binding
        }

        // Update the counter for adding new tests
        selectedTestsCounter = hiddenInputs.length;
    }
</script>



<script>
    // Function to filter dropdown items in Edit modal
    function editFilterFunction() {
        let input = document.getElementById("editSearchInput");
        let filter = input.value.toUpperCase();
        let div = document.getElementById("editDropdownItems");
        let a = div.getElementsByTagName("a");

        for (let i = 0; i < a.length; i++) {
            let txtValue = a[i].textContent || a[i].innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                a[i].style.display = "";
            } else {
                a[i].style.display = "none";
            }
        }
    }


    let selectedTestsCounterEDIT = 0; // To index the selected tests

   function addTestToEditTable(testName, price, testId) {
       let tableBody = document.getElementById("editTestTableBody");

    // Check if the test is already in the table (avoid duplicates)
    let existingRows = tableBody.getElementsByTagName("tr");
    for (let i = 0; i < existingRows.length; i++) {
        let existingTest = existingRows[i].getElementsByTagName("td")[0].textContent;
        if (existingTest === testName) {
            alert('This test is already added!');
            return; // Exit if test is already added
        }
    }

    // Create a new row
    let newRow = document.createElement("tr");

    // Create cells for test name, price, and remove button
    let testNameCell = document.createElement("td");
    let priceCell = document.createElement("td");
    let actionCell = document.createElement("td");

    // Set the cell values
    testNameCell.textContent = testName;
    priceCell.textContent = "$" + price;

    // Create the remove button
    let removeBtn = document.createElement("button");
    removeBtn.classList.add("btn", "btn-danger", "btn-sm");
    removeBtn.textContent = "Remove";
    removeBtn.onclick = function () {
        removeTestFromEditTable(newRow, testId); // Call the remove function
    };
    actionCell.appendChild(removeBtn);

    // Append the cells to the new row
    newRow.appendChild(testNameCell);
    newRow.appendChild(priceCell);
    newRow.appendChild(actionCell);

    // Append the new row to the table body
       tableBody.appendChild(newRow);


       // Add a hidden input for the selected test
       let selectedTestsDiv = document.getElementById("selectedTestsInputsEDIT");
       let hiddenTestInput = document.createElement("input");
       hiddenTestInput.type = "hidden";
       hiddenTestInput.name = `SelectedTestsEDIT[${selectedTestsCounterEDIT}].Test_ID`; // Bind to SelectedTests in the model
       hiddenTestInput.value = testId;
       selectedTestsDiv.appendChild(hiddenTestInput);

       selectedTestsCounterEDIT++; // Increment the counter
       console.log(selectedTestsDiv)

    // Update the total price
    updateEditTotalPrice();
}

    // Function to update the total price in Edit modal
    function updateEditTotalPrice() {
        let tableBody = document.getElementById("editTestTableBody");
        let totalPriceElement = document.getElementById("editTotalPrice");
        let total = 0;

        // Loop through the table rows and sum the prices
        let rows = tableBody.getElementsByTagName("tr");
        for (let i = 0; i < rows.length; i++) {
            let priceText = rows[i].getElementsByTagName("td")[1].textContent;
            let price = parseFloat(priceText.replace("$", ""));
            total += price;
        }

        // Update the total price in the table footer
        totalPriceElement.textContent = "$" + total;
    }

    function removeTestFromEditTable(row, testId) {
        let tableBody = document.getElementById("editTestTableBody");
        tableBody.removeChild(row); // Remove the row from the table

        // Remove the hidden input for the test
        let selectedTestsDiv = document.getElementById("selectedTestsInputsEDIT");
        let hiddenInputs = selectedTestsDiv.getElementsByTagName("input");

        // Loop through hidden inputs and remove the one matching testId
        for (let i = 0; i < hiddenInputs.length; i++) {
            if (hiddenInputs[i].value == testId) {
                selectedTestsDiv.removeChild(hiddenInputs[i]);
                break; // Exit loop after removing the matching input
            }
        }

        // Reindex the remaining hidden inputs to maintain the correct array structure
        reindexHiddenInputs();

        // Update the total price after removal
        updateEditTotalPrice();

        // Debugging: Log the updated state of hidden inputs
        console.log(selectedTestsDiv.innerHTML);
    }

    // Function to reindex hidden inputs
    function reindexHiddenInputs() {
        let selectedTestsDiv = document.getElementById("selectedTestsInputsEDIT");
        let hiddenInputs = selectedTestsDiv.getElementsByTagName("input");

        // Reindex all hidden inputs after removal
        for (let i = 0; i < hiddenInputs.length; i++) {
            hiddenInputs[i].name = `SelectedTestsEDIT[${i}].Test_ID`; // Ensure correct model binding
        }

        // Update the counter for adding new tests
        selectedTestsCounterEDIT = hiddenInputs.length;
    }




</script>
