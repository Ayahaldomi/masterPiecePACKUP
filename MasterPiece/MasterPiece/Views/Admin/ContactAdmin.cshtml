@model IEnumerable<MasterPiece.Models.Contact>

@{
    ViewBag.Title = "ContactAdmin";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .container {
        margin-top: 50px;
    }

    .table-container {
        margin-top: 20px;
    }

    .card {
        padding: 1em;
        overflow-x: auto;
    }

    button.btn.btn-success {
        margin: 0.5em;
    }

    body {
        background-color: #69acc759;
    }

    .container-fluid {
        padding-top: 120px !important;
    }

    /* Status colors */
    .status-pending {
        color: yellow;
    }

    .status-Approved {
        color: green;
    }

    .badge-dot {
        border-radius: 50%;
        display: inline-block !important;
        font-size: 0;
        height: .5rem;
        line-height: 1;
        padding: 0;
        vertical-align: middle;
        width: .5rem;
    }

    .bg-info {
        --gk-bg-opacity: 1;
        background-color: #0ea5e9 !important;
    }

    .bg-success {
        --gk-bg-opacity: 1;
        background-color: #38a169 !important;
    }

    .filter-buttons {
        margin-bottom: 1em;
    }

        .filter-buttons button {
            margin-right: 10px;
        }

    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

        .pagination button {
            margin: 0 5px;
            padding: 5px 10px;
            border: none;
            background-color: #007bff;
            color: white;
            cursor: pointer;
        }

            .pagination button.active {
                background-color: #0056b3;
            }

            .pagination button:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
            }
</style>

<div class="container mt-5">
    <div class="card shadow p-4 mb-5 bg-white rounded">
        <h2 class="text-center">Contact</h2>

        <!-- Status filter buttons -->
        <div class="d-flex justify-content-center">
            <div class="btn-group">
                <button class="btn btn-outline-primary" onclick="filterTable('all')">All</button>
                <button class="btn btn-outline-primary" onclick="filterTable('unanswered')">Unanswered</button>
                <button class="btn btn-outline-primary" onclick="filterTable('answered')">Answered</button>
            </div>
        </div>

        <br />

        <div class="table-responsive">
            <table class="table table-striped table-bordered" id="feedbackTable">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Subject</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr class="feedback-row @(item.status == 0 ? "unanswered" : "answered")">
                            <td>@item.name</td>
                            <td>@item.email</td>
                            <td>@item.sub</td>
                            <td>@item.sent_date</td>
                            <td>
                                <span class="badge @(item.status == 0 ? "bg-info" : "bg-success") badge-dot me-1"></span>@(item.status == 0 ? "Unanswered" : "Answered")
                            </td>
                            <td class="text-center">
                                
                                    <a class="btn-icon btn btn-ghost btn-sm rounded-circle" href="@Url.Action("contactDetails", "Admin", new {contactID = item.contact_id})" role="button"
                                       id="productDropdown8" 
                                       aria-expanded="false">
                                        <i class="fa-solid fa-reply"></i>
                                    </a>
                                
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination Controls -->
        <div class="pagination" id="paginationControls">
            <!-- Pagination buttons will be dynamically added here -->
        </div>
    </div>
</div>

<script>
    const rowsPerPage = 5;
    let currentPage = 1;
    let currentFilter = 'all'; // Track the current filter

    // Function to render the pagination buttons
    function renderPagination(totalRows) {
        const totalPages = Math.ceil(totalRows / rowsPerPage);
        const paginationControls = document.getElementById("paginationControls");
        paginationControls.innerHTML = "";

        for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement("button");
            button.textContent = i;
            button.classList.add("page-btn");
            if (i === currentPage) {
                button.classList.add("active");
            }
            button.addEventListener("click", function () {
                currentPage = i;
                paginateTable();
            });
            paginationControls.appendChild(button);
        }
    }

    // Function to paginate the table rows with filtering
    function paginateTable() {
        const rows = document.querySelectorAll('#feedbackTable tbody .feedback-row');
        let filteredRows = [];

        // Apply the current filter to the rows
        rows.forEach((row) => {
            if (currentFilter === 'all' || row.classList.contains(currentFilter)) {
                filteredRows.push(row); // Add row to filtered list if it matches the filter
            }
        });

        const totalRows = filteredRows.length;
        const start = (currentPage - 1) * rowsPerPage;
        const end = start + rowsPerPage;

        // Hide all rows initially
        rows.forEach((row) => {
            row.style.display = 'none';
        });

        // Display only the filtered rows based on the pagination
        filteredRows.forEach((row, index) => {
            if (index >= start && index < end) {
                row.style.display = ""; // Show the row
            }
        });

        renderPagination(totalRows);
    }

    // Initialize the table with pagination
    window.onload = function () {
        paginateTable();
    }

    // Function to filter and re-paginate the table
    function filterTable(status) {
        currentFilter = status; // Update the current filter
        currentPage = 1; // Reset to first page after applying filter
        paginateTable(); // Re-apply pagination with the new filter
    }

</script>





