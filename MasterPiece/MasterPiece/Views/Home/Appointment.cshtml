@model IEnumerable<MasterPiece.Models.Test>

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap');

    :root {
        /*--primary: #6b59d3;*/
        --secondary: #bfc0c0;
        --white: #fff;
        --text-clr: #5b6475;
        --header-clr: #25273d;
        --next-btn-hover: #5196b1;
        --back-btn-hover: #8b8c8c;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        list-style: none;
        outline: none;
        font-family: 'Open Sans', sans-serif;
    }

    body {
        background: #f4fffe;
        color: var(--text-clr);
        font-size: 16px;
        position: relative;
    }

    .wrapper {
        width: 750px;
        max-width: 100%;
        background: var(--white);
        margin: 50px auto 0;
        padding: 50px;
        border-radius: 5px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* Added box-shadow */
    }

        .wrapper .header {
            margin-bottom: 35px;
            display: flex;
            justify-content: center;
        }

            .wrapper .header ul {
                display: flex;
            }

                .wrapper .header ul li {
                    margin-right: 50px;
                    position: relative;
                }

                    .wrapper .header ul li:last-child {
                        margin-right: 0;
                    }

                    .wrapper .header ul li:before {
                        content: "";
                        position: absolute;
                        top: 50%;
                        transform: translateY(-252%);
                        left: 55px;
                        width: 100%;
                        height: 2px;
                        background: var(--secondary);
                    }

                    .wrapper .header ul li:last-child:before {
                        display: none;
                    }

                    .wrapper .header ul li div {
                        padding: 5px;
                        border-radius: 50%;
                    }

                    .wrapper .header ul li p {
                        width: 50px;
                        height: 50px;
                        background: var(--secondary);
                        color: var(--white);
                        text-align: center;
                        line-height: 50px;
                        border-radius: 50%;
                    }

                    .wrapper .header ul li.active:before {
                        background: var(--primary);
                    }

                    .wrapper .header ul li.active p {
                        background: var(--primary);
                    }

        .wrapper .form_wrap {
            margin-bottom: 35px;
        }

            .wrapper .form_wrap h2 {
                color: var(--header-clr);
                text-align: center;
                text-transform: uppercase;
                margin-bottom: 20px;
            }

            .wrapper .form_wrap .input_wrap {
                width: 490px;
                max-width: 100%;
                margin: 0 auto 20px;
            }

                .wrapper .form_wrap .input_wrap:last-child {
                    margin-bottom: 0;
                }

                .wrapper .form_wrap .input_wrap label {
                    display: block;
                    margin-bottom: 5px;
                }

                .wrapper .form_wrap .input_wrap .input {
                    border: 2px solid var(--secondary);
                    border-radius: 3px;
                    padding: 10px;
                    display: block;
                    width: 100%;
                    font-size: 16px;
                    transition: 0.5s ease;
                }

                    .wrapper .form_wrap .input_wrap .input:focus {
                        border-color: var(--primary);
                    }

        .wrapper .btns_wrap {
            width: 490px;
            max-width: 100%;
            margin: 0 auto;
        }

            .wrapper .btns_wrap .common_btns {
                display: flex;
                justify-content: space-between;
            }

                .wrapper .btns_wrap .common_btns.form_1_btns {
                    justify-content: flex-end;
                }

                .wrapper .btns_wrap .common_btns button {
                    border: 0;
                    padding: 12px 15px;
                    background: var(--primary);
                    color: var(--white);
                    width: 135px;
                    justify-content: center;
                    display: flex;
                    align-items: center;
                    font-size: 16px;
                    border-radius: 3px;
                    transition: 0.5s ease;
                    cursor: pointer;
                }

                    .wrapper .btns_wrap .common_btns button.btn_back {
                        background: var(--secondary);
                    }

                    .wrapper .btns_wrap .common_btns button.btn_next .icon {
                        display: flex;
                        margin-left: 10px;
                    }

                    .wrapper .btns_wrap .common_btns button.btn_back .icon {
                        display: flex;
                        margin-right: 10px;
                    }

                    .wrapper .btns_wrap .common_btns button.btn_next:hover,
                    .wrapper .btns_wrap .common_btns button.btn_done:hover {
                        background: var(--next-btn-hover);
                    }

                    .wrapper .btns_wrap .common_btns button.btn_back:hover {
                        background: var(--back-btn-hover);
                    }

    .modal_wrapper {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        visibility: hidden;
    }

        .modal_wrapper .shadow {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            opacity: 0;
            transition: 0.2s ease;
        }

        .modal_wrapper .success_wrap {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-800px);
            background: var(--white);
            padding: 50px;
            display: flex;
            align-items: center;
            border-radius: 5px;
            transition: 0.5s ease;
        }

            .modal_wrapper .success_wrap .modal_icon {
                margin-right: 20px;
                width: 50px;
                height: 50px;
                background: var(--primary);
                color: var(--white);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 32px;
                font-weight: 700;
            }

        .modal_wrapper.active {
            visibility: visible;
        }

            .modal_wrapper.active .shadow {
                opacity: 1;
            }

            .modal_wrapper.active .success_wrap {
                transform: translate(-50%,-50%);
            }


    /* Dropdown container */
    .dropdown {
        width: 490px;
        max-width: 100%;
        margin: 0 auto 20px;
    }

    /* Style the search box */
    .search-box {
        border: 2px solid var(--secondary);
        border-radius: 3px;
        padding: 10px;
        display: block;
        width: 100%;
        font-size: 16px;
        transition: 0.5s ease;
    }

    /* The container for the dropdown items */
    .dropdown-content {
        display: none;
        position: absolute;
        background-color: white;
        min-width: 100%;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
        z-index: 1;
        max-height: 200px;
        overflow-y: auto; /* Scroll when dropdown exceeds height */
        border: 1px solid #ddd;
    }

        /* Links inside the dropdown */
        .dropdown-content a {
            color: black;
            padding: 12px;
            text-decoration: none;
            display: block;
        }

            /* Highlight the search result links when hovered */
            .dropdown-content a:hover {
                background-color: #f1f1f1;
            }

    /* Show the dropdown */
    .dropdown:hover .dropdown-content {
        display: block;
    }

    /* Table styles */
    .test-table {
        width: 75%;
        margin: 20px auto;
        border-collapse: collapse;
        border: 1px solid #ddd;
    }

        .test-table th, .test-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .test-table th {
            background-color: #f4f4f4;
        }

        /* Style the Total Price Row */
        .test-table tfoot th {
            font-weight: bold;
            background-color: #f4f4f4;
        }
    /* Style the Remove button */
    .remove-btn {
        background-color: #ff4d4d;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

        .remove-btn:hover {
            background-color: #ff3333;
        }


    div#time_buttons {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 10px;
        margin: 20px auto;
        width: 490px;
    }

    .time-btn {
        display: inline-block;
        margin: 5px;
        padding: 10px 20px; /* Increase padding for better button size */
        background-color: #f0f0f0;
        border: 2px solid #ddd; /* Add border for a cleaner look */
        border-radius: 5px; /* Add border-radius for rounded buttons */
        cursor: pointer;
        font-size: 16px; /* Adjust font size */
        transition: background-color 0.3s ease;
    }

        .time-btn.selected {
            background-color: #5196b1;
            color: white;
            border-color: #5196b1; /* Match border color when selected */
        }

        .time-btn:hover {
            background-color: #5196b1; /* Add hover effect for better interactivity */
            color: white;
            border-color: #5196b1; /* Match border color on hover */
        }

    p#chosen_time {
        width: 490px;
        margin: 0 auto;
        text-align: center;
        margin-bottom: 10px;
    }
</style>

<style>
    /* Modal styling */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1000; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        background-color: rgba(0, 0, 0, 0.5); /* Black background with opacity */
    }

    .modal-content {
        background-color: #fff;
        margin: 15% auto; /* Center the modal */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more or less depending on the size you want */
        max-width: 500px;
    }

    /* Close button */
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /* Error Modal styling */
#errorModal .modal-content {
    background-color: #f44336; /* Red color for error */
    color: white;
}
</style>

@{
    var testValue = 0;
}

<script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
<form id="appointmentForm" action="/Home/CreateAppointment" method="post">
    <div class="wrapper">
        <div class="header">
            <ul>
                <li class="active form_1_progessbar">
                    <div>
                        <p>1</p>
                    </div>
                </li>
                <li class="form_2_progessbar">
                    <div>
                        <p>2</p>
                    </div>
                </li>
                <li class="form_3_progessbar">
                    <div>
                        <p>3</p>
                    </div>
                </li>
                <li class="form_4_progessbar">
                    <div>
                        <p>4</p>
                    </div>
                </li>
            </ul>
        </div>
        <div class="form_wrap">
            <div class="form_1 data_info">
                <h2>Personal Information</h2>

                <div class="form_container">
                    <div class="input_wrap">
                        <label for="email">Full Name</label>
                        <input type="text" name="Full_Name" class="input" id="email" required>
                    </div>
                    <div class="input_wrap">
                        <label for="password">Date of Birth</label>
                        <input type="date" name="Date_Of_Birth" class="input" id="password" required>
                    </div>
                    <div class="input_wrap">
                        <label for="confirm_password">Gender</label>
                        @*<input type="password" name="confirm password" class="input" id="confirm_password">*@
                        <select class="input" id="gender" name="Gender" required>
                            <option value="">Select Gender</option>
                            <option value="male">Male</option>
                            <option value="female">Female</option>
                        </select>
                    </div>
                </div>

            </div>
            <div class="form_2 data_info" style="display: none;">
                <h2>Contact Information</h2>

                <div class="form_container">
                    <div class="input_wrap">
                        <label for="user_name">Email Address</label>
                        <input type="email" name="Email_Address" class="input" id="user_name" required>
                    </div>
                    <div class="input_wrap">
                        <label for="first_name">Phone Number</label>
                        <input type="number" name="Phone_Number" class="input" id="first_name" required>
                    </div>
                    <div class="input_wrap">
                        <label for="last_name">Home Address</label>
                        <input type="text" name="Home_Address" class="input" id="last_name" required>
                    </div>
                </div>

            </div>
            <div class="form_3 data_info" style="display: none;">
                <h2>Appointment Date And Tests</h2>

                <div class="form_container">
                    <div class="input_wrap">
                        <label for="preferred_date">Preferred Date and Time</label>
                        <input type="date" name="preferred_date" class="input" id="preferred_date" min="" required>
                    </div>

                    <!-- Custom time button will be added here -->
                    <div id="time_buttons" style="display:none;">
                        <button type="button" class="time-btn" data-time="08:00">8:00 AM</button>
                        <button type="button" class="time-btn" data-time="10:00">10:00 AM</button>
                        <button type="button" class="time-btn" data-time="12:00">12:00 PM</button>
                        <button type="button" class="time-btn" data-time="14:00">2:00 PM</button>
                        <button type="button" class="time-btn" data-time="16:00">4:00 PM</button>
                        <!-- Custom Time Button -->
                        <button type="button" id="custom_time_btn" class="time-btn" data-time="custom">Custom Time (Additional Charge)</button>
                        <!-- Hidden input for custom time selection -->
                        <input type="time" id="custom_time_input" style="display:none;" />
                    </div>

                    <!-- Hidden input to store the final combined date and time -->
                    <input type="hidden" id="dateOfAppointment" name="Date_Of_Appo" required />

                    <!-- Display chosen time -->
                    <p id="chosen_time" style="display:none;">Selected Time: <span id="time_value"></span></p>

                    <!-- Display additional charge when custom time is selected -->
                    <p id="additional_charge" style="display:none;">Additional Charge: $20</p>

                    <div class="dropdown">
                        <input type="text" placeholder="Search.." id="searchInput" onkeyup="filterFunction()" class="search-box">
                        <div id="dropdownItems" class="dropdown-content">
                            @foreach (var test in Model)
                            {
                                <a href="#" data-price="@test.Price" onclick="addTestToTable('@test.Test_Name', @test.Price, @test.Test_ID)" title="@test.Description">@test.Test_Name</a>
                            }

                        </div>
                    </div>

                    <!-- Table to display selected tests -->
                    <table id="selectedTestsTable" class="test-table">
                        <thead>
                            <tr>
                                <th>Test Name</th>
                                <th>Price ($)</th>
                                <th>Action</th> <!-- New "Action" column for remove button -->
                            </tr>
                        </thead>
                        <tbody id="testTableBody">
                            <!-- Selected tests will appear here -->
                        </tbody>
                        <tfoot>
                            <tr>
                                <th>Total</th>
                                <th id="totalPrice">
                                    $0
                                    @*<input type="hidden" name="Total_price" id="Total_price" />*@
                                </th>
                                <th></th> <!-- Empty cell for alignment -->
                            </tr>
                        </tfoot>
                    </table>
                    <input name="Total_price" type="hidden" value="0" id="Total_price" />

                    <!-- Hidden inputs for selected tests -->
                    <div id="selectedTestsInputs"></div>


                </div>

            </div>
            <div class="form_4 data_info" style="display: none;">
                <h2 class="text-center mb-4">Payment Method</h2>

                <div class="form_container">
                    <div class="form-group">

                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="Amount_paid" id="cash" value="0" onclick="togglePaymentDetails(false)" checked>
                            <label class="form-check-label" for="cash">Cash</label>
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="Amount_paid" id="paypal" value="0" onclick="togglePaymentDetails(true)">
                            <label class="form-check-label" for="paypal">PayPal</label>
                        </div>
                    </div>


                </div>
            </div>


        </div>
        <div class="btns_wrap">
            <div class="common_btns form_1_btns">
                <button type="button" class="btn_next">Next <span class="icon"><ion-icon name="arrow-forward-sharp"></ion-icon></span></button>
            </div>
            <div class="common_btns form_2_btns" style="display: none;">
                <button type="button" class="btn_back"><span class="icon"><ion-icon name="arrow-back-sharp"></ion-icon></span>Back</button>
                <button type="button" class="btn_next">Next <span class="icon"><ion-icon name="arrow-forward-sharp"></ion-icon></span></button>
            </div>
            <div class="common_btns form_3_btns" style="display: none;">
                <button type="button" class="btn_back"><span class="icon"><ion-icon name="arrow-back-sharp"></ion-icon></span>Back</button>
                <button type="button" class="btn_next">Next <span class="icon"><ion-icon name="arrow-forward-sharp"></ion-icon></span></button>
            </div>
            <div class="common_btns form_4_btns" style="display: none;">
                <button type="button" class="btn_back"><span class="icon"><ion-icon name="arrow-back-sharp"></ion-icon></span>Back</button>
                <button type="submit" class="btn_done">Done</button>
            </div>
        </div>
    </div>
</form>

<!-- PayPal Modal (hidden by default) -->
<div id="paypalModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span> <!-- Close button -->

        @using (Html.BeginForm("ProcessPayment", "Home", FormMethod.Post, new { @id = "paypalForm", @class = "paypalForm", @target = "_blank" }))
        {
            @Html.Hidden("patientId", 1)
            <input type="hidden" name="value" id="paypalValue" value="0" />
            <button type="button" id="confirmAndPayBtn" class="btn btn-primary">Confirm and Pay</button>
        }
    </div>
</div>

<!-- Error Modal for validation -->
<div id="errorModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <p id="errorMessage">Please fill in all required fields.</p>
    </div>
</div>


@*<div class="modal_wrapper">
    <div class="shadow"></div>
    <div class="success_wrap">
        <span class="modal_icon"><ion-icon name="checkmark-sharp"></ion-icon></span>
        <p>You have successfully completed the process.</p>
    </div>
</div>*@

<script>
    var form_1 = document.querySelector(".form_1");
    var form_2 = document.querySelector(".form_2");
    var form_3 = document.querySelector(".form_3");
    var form_4 = document.querySelector(".form_4");


    var form_1_btns = document.querySelector(".form_1_btns");
    var form_2_btns = document.querySelector(".form_2_btns");
    var form_3_btns = document.querySelector(".form_3_btns");
    var form_4_btns = document.querySelector(".form_4_btns");


    var form_1_next_btn = document.querySelector(".form_1_btns .btn_next");
    var form_2_back_btn = document.querySelector(".form_2_btns .btn_back");
    var form_2_next_btn = document.querySelector(".form_2_btns .btn_next");
    var form_3_back_btn = document.querySelector(".form_3_btns .btn_back");
    var form_3_next_btn = document.querySelector(".form_3_btns .btn_next");
    var form_4_back_btn = document.querySelector(".form_4_btns .btn_back");

    var form_2_progessbar = document.querySelector(".form_2_progessbar");
    var form_3_progessbar = document.querySelector(".form_3_progessbar");
    var form_4_progessbar = document.querySelector(".form_4_progessbar");

    var btn_done = document.querySelector(".btn_done");
    var modal_wrapper = document.querySelector(".modal_wrapper");
    var shadow = document.querySelector(".shadow");

    form_1_next_btn.addEventListener("click", function () {
        form_1.style.display = "none";
        form_2.style.display = "block";

        form_1_btns.style.display = "none";
        form_2_btns.style.display = "flex";

        form_2_progessbar.classList.add("active");
    });

    form_2_back_btn.addEventListener("click", function () {
        form_1.style.display = "block";
        form_2.style.display = "none";

        form_1_btns.style.display = "flex";
        form_2_btns.style.display = "none";

        form_2_progessbar.classList.remove("active");
    });

    form_2_next_btn.addEventListener("click", function () {
        form_2.style.display = "none";
        form_3.style.display = "block";

        form_3_btns.style.display = "flex";
        form_2_btns.style.display = "none";

        form_3_progessbar.classList.add("active");
    });
    form_3_back_btn.addEventListener("click", function () {
        form_2.style.display = "block";
        form_3.style.display = "none";

        form_2_btns.style.display = "flex";
        form_3_btns.style.display = "none";

        form_3_progessbar.classList.remove("active");
    });

    form_3_next_btn.addEventListener("click", function () {
        form_3.style.display = "none";
        form_4.style.display = "block";

        form_4_btns.style.display = "flex";
        form_3_btns.style.display = "none";

        form_4_progessbar.classList.add("active");
    });

    form_4_back_btn.addEventListener("click", function () {
        form_3.style.display = "block";
        form_4.style.display = "none";

        form_4_btns.style.display = "none";
        form_3_btns.style.display = "flex";

        form_4_progessbar.classList.remove("active");
    });

    btn_done.addEventListener("click", function () {
        modal_wrapper.classList.add("active");
    })

    shadow.addEventListener("click", function () {
        modal_wrapper.classList.remove("active");
    })
</script>


<script>
    // Function to filter dropdown items
    function filterFunction() {
        let input = document.getElementById("searchInput");
        let filter = input.value.toUpperCase();
        let div = document.getElementById("dropdownItems");
        let a = div.getElementsByTagName("a");

        for (let i = 0; i < a.length; i++) {
            let txtValue = a[i].textContent || a[i].innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                a[i].style.display = "";
            } else {
                a[i].style.display = "none";
            }
        }
    }

    // Custom time charge amount
    const customTimeCharge = 20;
    let customTimeSelected = false;

    // Handle date change to fetch booked times
    document.getElementById('preferred_date').addEventListener('change', function () {
        const selectedDate = this.value; // Get selected date
        const timeButtons = document.querySelectorAll('.time-btn');
        const timeButtonContainer = document.getElementById('time_buttons');

        // Show time buttons
        timeButtonContainer.style.display = 'flex';

        // Enable all buttons initially (reset)
        timeButtons.forEach(button => {
            button.disabled = false; // Reset all buttons to enabled
        });

        // Fetch the booked times for the selected date
        fetch(`/Home/GetAvailableTimes?date=${selectedDate}`)
            .then(response => response.json())
            .then(bookedTimes => {
                // Disable the buttons for the booked times
                timeButtons.forEach(button => {
                    const buttonTime = button.getAttribute('data-time');
                    if (bookedTimes.includes(buttonTime)) {
                        button.disabled = true; // Disable button if time is booked
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching available times:', error);
            });
    });

    // Handle time button clicks
    document.querySelectorAll('.time-btn').forEach(button => {
        button.addEventListener('click', function () {
            const selectedTime = this.getAttribute('data-time');

            if (selectedTime === 'custom') {
                // Show custom time picker
                document.getElementById('custom_time_input').style.display = 'inline';
                document.getElementById('chosen_time').style.display = 'none'; // Hide until custom time is chosen
            } else {
                // Hide custom time input and additional charge, show selected time
                document.getElementById('custom_time_input').style.display = 'none';
                document.getElementById('additional_charge').style.display = 'none';
                document.getElementById('chosen_time').style.display = 'block';
                document.getElementById('time_value').textContent = selectedTime;
                customTimeSelected = false; // Reset custom time flag
                updateTotalPrice();
            }
        });
    });

    // Listen for changes in the custom time picker
    document.getElementById('custom_time_input').addEventListener('change', function () {
        const customTime = this.value;
        if (customTime) {
            // Display custom time and additional charge
            document.getElementById('chosen_time').style.display = 'block';
            document.getElementById('time_value').textContent = customTime;
            document.getElementById('additional_charge').style.display = 'block';
            customTimeSelected = true;
            updateTotalPrice(); // Update total with additional charge
        }
    });


    // Function to update the total price
    function updateTotalPrice() {
        // Always refresh the reference to the elements
        let tableBody = document.getElementById("testTableBody");
        let totalPriceElement = document.getElementById("totalPrice");
        let totalPriceInput = document.getElementById("Total_price"); // Ensure correct reference
        let paypal = document.getElementById("paypal");
        let paypalValue = document.getElementById("paypalValue");

        let total = 0;

        // Loop through the table rows and sum the prices
        let rows = tableBody.getElementsByTagName("tr");
        for (let i = 0; i < rows.length; i++) {
            let priceText = rows[i].getElementsByTagName("td")[1].textContent;
            let price = parseFloat(priceText.replace("$", ""));
            total += price;
        }

        // Add additional charge for custom time if selected
        if (customTimeSelected) {
            total += customTimeCharge;
        }

        // Update the total price in the table footer
        totalPriceElement.textContent = "$" + total;

        paypalValue.value = parseFloat(total);
        testValue = parseFloat(total);
        // Update the hidden input for form submission
        if (totalPriceInput) {
            totalPriceInput.value = parseFloat(total);
        }

        // If PayPal, update the hidden PayPal input too
        if (paypal) {
            paypal.value = total;
        }

        console.log("Total Price Updated:", total); // Debugging log
    }


    let selectedTestsCounter = 0; // To index the selected tests

    // Function to add the selected test and price to the table
    function addTestToTable(testName, price, testId) {
        let tableBody = document.getElementById("testTableBody");

        // Check if the test is already in the table (avoid duplicates)
        let existingRows = tableBody.getElementsByTagName("tr");
        for (let i = 0; i < existingRows.length; i++) {
            let existingTest = existingRows[i].getElementsByTagName("td")[0].textContent;
            if (existingTest === testName) {
                alert('This test is already added!');
                return; // Exit if test is already added
            }
        }

        // Create a new row
        let newRow = document.createElement("tr");

        // Create cells for test name, price, and remove button
        let testNameCell = document.createElement("td");
        let priceCell = document.createElement("td");
        let actionCell = document.createElement("td");

        // Set the cell values
        testNameCell.textContent = testName;
        priceCell.textContent = "$" + price;

        // Create the remove button
        let removeBtn = document.createElement("button");
        removeBtn.classList.add("remove-btn");
        removeBtn.textContent = "Remove";
        removeBtn.onclick = function () {
            removeTestFromTable(newRow, testId); // Call the remove function
        };
        actionCell.appendChild(removeBtn);

        // Append the cells to the new row
        newRow.appendChild(testNameCell);
        newRow.appendChild(priceCell);
        newRow.appendChild(actionCell);

        // Append the new row to the table body
        tableBody.appendChild(newRow);

        // Add a hidden input for the selected test
        let selectedTestsDiv = document.getElementById("selectedTestsInputs");
        let hiddenTestInput = document.createElement("input");
        hiddenTestInput.type = "hidden";
        hiddenTestInput.name = `SelectedTests[${selectedTestsCounter}].Test_ID`; // Bind to SelectedTests in the model
        hiddenTestInput.value = testId;
        selectedTestsDiv.appendChild(hiddenTestInput);

        selectedTestsCounter++; // Increment the counter

        // Update the total price
        updateTotalPrice();
    }

    //// Function to remove a test from the table
    //function removeTestFromTable(row, testId) {
    //    let tableBody = document.getElementById("testTableBody");
    //    tableBody.removeChild(row); // Remove the row from the table

    //    // Remove the hidden input for the test
    //    let selectedTestsDiv = document.getElementById("selectedTestsInputs");
    //    let hiddenInputs = selectedTestsDiv.getElementsByTagName("input");
    //    for (let i = 0; i < hiddenInputs.length; i++) {
    //        if (hiddenInputs[i].value == testId) {
    //            selectedTestsDiv.removeChild(hiddenInputs[i]);
    //            break;
    //        }
    //    }

    //    // Update the total price after removal
    //    updateTotalPrice();
    //}

    function removeTestFromTable(row, testId) {
        let tableBody = document.getElementById("testTableBody");
        tableBody.removeChild(row); // Remove the row from the table

        // Remove the hidden input for the test
        let selectedTestsDiv = document.getElementById("selectedTestsInputs");
        let hiddenInputs = selectedTestsDiv.getElementsByTagName("input");

        // Loop through hidden inputs and remove the one matching testId
        for (let i = 0; i < hiddenInputs.length; i++) {
            if (hiddenInputs[i].value == testId) {
                selectedTestsDiv.removeChild(hiddenInputs[i]);
                break; // Exit loop after removing the matching input
            }
        }

        // Reindex the remaining hidden inputs to maintain the correct array structure
        reindexHiddenInputs();

        // Update the total price after removal
        updateEditTotalPrice();

        // Debugging: Log the updated state of hidden inputs
        console.log(selectedTestsDiv.innerHTML);
    }

    // Function to reindex hidden inputs
    function reindexHiddenInputs() {
        let selectedTestsDiv = document.getElementById("selectedTestsInputs");
        let hiddenInputs = selectedTestsDiv.getElementsByTagName("input");

        // Reindex all hidden inputs after removal
        for (let i = 0; i < hiddenInputs.length; i++) {
            hiddenInputs[i].name = `SelectedTests[${i}].Test_ID`; // Ensure correct model binding
        }

        // Update the counter for adding new tests
        selectedTestsCounter = hiddenInputs.length;
    }

    // Function to handle payment details toggle
    function togglePaymentDetails(isPayPal) {
        const paypalDetails = document.getElementById("paypalDetails");

        if (isPayPal) {
            paypalDetails.style.display = "block"; // Show PayPal details if PayPal is selected
        } else {
            paypalDetails.style.display = "none";  // Hide PayPal details if Cash is selected
        }
    }

    // Get today's date in YYYY-MM-DD format
    const today = new Date().toISOString().split('T')[0];
    // Set the min attribute to today for the preferred date input
    document.getElementById('preferred_date').setAttribute('min', today);

    // Show time buttons when date is selected
    document.getElementById('preferred_date').addEventListener('change', function () {
        // Show the time buttons once a date is selected
        document.getElementById('time_buttons').style.display = 'flex';
    });

    // Handle time selection buttons
    const timeButtons = document.querySelectorAll('.time-btn');
    timeButtons.forEach(button => {
        button.addEventListener('click', function () {
            // Remove 'selected' class from all buttons
            timeButtons.forEach(btn => btn.classList.remove('selected'));
            // Add 'selected' class to the clicked button
            this.classList.add('selected');

            // Show the chosen time below the buttons
            document.getElementById('chosen_time').style.display = 'block';
            document.getElementById('time_value').innerText = this.getAttribute('data-time');
        });
    });



    // Handle PayPal button click
    document.getElementById('confirmAndPayBtn').addEventListener('click', function (event) {
        event.preventDefault(); // Prevent form submission for appointment

        // Correctly target the PayPal form
        let paypalForm = document.querySelector('.paypalForm');
        if (paypalForm) {
            paypalForm.submit(); // Submit PayPal form separately
        } else {
            console.error('PayPal form not found');
        }
    });


    document.getElementById('appointmentForm').addEventListener('submit', function (event) {
        // Get the selected date
        const selectedDate = document.getElementById('preferred_date').value;

        // Get the selected time
        const selectedTime = document.getElementById('time_value').innerText; // Should be in "HH:MM" format

        // Combine the date and time into a single DateTime string
        const combinedDateTime = selectedDate + "T" + selectedTime;

        // Set the combined DateTime value in the hidden input
        document.getElementById('dateOfAppointment').value = combinedDateTime;

        // Update the hidden total price input before form submission
        document.getElementById('Total_price').value = document.getElementById('totalPrice').textContent.replace('$', '');

        console.log("Submitting Total Price:", document.getElementById('Total_price').value); // Debugging log

        // Perform validation before submission
        if (!validateForm()) {
            event.preventDefault(); // Prevent form submission if validation fails
        }
    });

    // Get the error modal
    var errorModal = document.getElementById("errorModal");

    // Get the close button in the error modal
    var closeErrorModal = errorModal.querySelector(".close");

    // Function to open the error modal with a custom message
    function showErrorModal(message) {
        document.getElementById("errorMessage").textContent = message;
        errorModal.style.display = "block";
    }

    // Close the error modal when the user clicks on the close button
    closeErrorModal.onclick = function () {
        errorModal.style.display = "none";
    };

    // Close the error modal if the user clicks outside of it
    window.onclick = function (event) {
        if (event.target == errorModal) {
            errorModal.style.display = "none";
        }
    };

    // Function to validate form inputs
    function validateForm() {
        // List of required fields
        const requiredFields = [
            document.getElementById('email'),
            document.getElementById('password'),
            document.getElementById('gender'),
            document.getElementById('user_name'),
            document.getElementById('first_name'),
            document.getElementById('last_name'),
            document.getElementById('preferred_date'),
            document.getElementById('time_value')
        ];

        // Check if any required field is empty
        for (let field of requiredFields) {
            if (!field || !field.value.trim()) {
                showErrorModal("Please fill in all required fields.");
                return false; // Stop form submission
            }
        }

        // If all fields are filled, return true to proceed with form submission
        return true;
    }


</script>


<script>
    // Get the modal
    var modal = document.getElementById("paypalModal");

    // Get the radio button that opens the modal
    var paypalRadio = document.getElementById("paypal");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks the PayPal radio button, open the modal
    paypalRadio.onclick = function () {
        modal.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    // Handle PayPal form submission inside the modal
    document.getElementById('confirmAndPayBtn').addEventListener('click', function (event) {
        event.preventDefault(); // Prevent the form submission if you want to handle further logic

        let paypalForm = document.querySelector('.paypalForm');
        if (paypalForm) {
            paypalForm.submit(); // Submit PayPal form separately
        } else {
            console.error('PayPal form not found');
        }

        // Close the modal after submission
        modal.style.display = "none";
    });
</script>





